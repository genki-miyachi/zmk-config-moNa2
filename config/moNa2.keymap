#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        pw_button: to_layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(M) &kp A &kp D &kp O &kp M &kp A &kp D &kp O &kp UNDER &kp N0 &kp N3 &kp N1 &kp N3 &kp RET>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&pw_button>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E         &kp R      &kp T                                               &kp Y            &kp U  &kp I      &kp O    &kp P
&mt LCTRL A       &kp S           &kp D         &kp F      &kp G                 &trans         &kp MINUS      &kp H            &kp J  &kp K      &kp L    &lt 4 SEMICOLON
&mt LEFT_SHIFT Z  &kp X           &kp C         &kp V      &kp B                 &mo 5          &kp SEMICOLON  &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LS(LG(N8))  &kp LEFT_ALT  &kp LCTRL  &mt LEFT_COMMAND TAB  &lt 1 SPACE    &lt 2 ENTER    &kp RIGHT_SHIFT                             &kp ESCAPE
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        layer_1 {
            bindings = <
&kp TAB         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans                          &trans             &trans    &trans        &trans     &kp BACKSPACE
&kp LCTRL       &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &trans        &trans    &trans  &trans             &trans    &kp UP_ARROW  &trans     &trans
&kp LEFT_SHIFT  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans    &trans  &trans             &kp LEFT  &kp DOWN      &kp RIGHT  &trans
&trans          &trans        &trans        &kp LCTRL     &kp TAB       &trans    &mo 3   &kp RIGHT_COMMAND                                     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_2 {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                                       &kp CARET       &kp AMPERSAND  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ASTERISK
&kp LCTRL        &trans       &trans    &trans      &kp INT_YEN       &trans         &trans           &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SQT
&kp LEFT_SHIFT   &trans       &trans    &trans      &kp PERIOD        &trans         &trans           &kp UNDERSCORE  &kp PLUS       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp GRAVE
&trans           &trans       &trans    &kp LCTRL   &kp LEFT_COMMAND  &lt 3 SPACE    &kp RIGHT_SHIFT  &trans                                                                      &kp NON_US_BACKSLASH
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &kp K_MUTE    &kp C_STOP      &kp LS(LC(LG(NUMBER_4)))                    &kp LA(LC(U))  &kp LA(LC(I))  &kp LA(LC(ENTER))  &trans             &pw_button
&trans  &trans  &kp C_VOL_UP  &kp C_NEXT      &kp LS(LG(NUMBER_4))      &trans    &trans  &kp LA(LC(J))  &kp LA(LC(K))  &kp LA(LC(LEFT))   &kp LA(LC(RIGHT))  &trans
&trans  &trans  &kp C_VOL_DN  &kp C_PREVIOUS  &kp LS(LG(NUMBER_5))      &trans    &trans  &kp LG(SPACE)  &trans         &kp LA(LC(DOWN))   &kp LA(LC(UP))     &trans
&trans  &trans  &trans        &kp LEFT_GUI    &trans                    &trans    &trans  &trans                                                              &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &trans  &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(T))  &kp LS(LG(RIGHT_BRACKET))  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans  &kp LG(LEFT_BRACKET)      &kp LG(T)      &kp LG(RIGHT_BRACKET)      &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans  &trans                    &trans         &trans                     &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                                      &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                  &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mo 5   &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                              &trans
            >;
        };
    };
};
